BUBBLE SORT
https://www.geeksforgeeks.org/bubble-sort/

-Adjacent elements are compared and swapped.
-Time complexity : O(n*n)

CODE:
def bubbleSort(arr):
	n = len(arr)

	# Traverse through all array elements
	for i in range(n):
		swapped = False

		# Last i elements are already in place
		for j in range(0, n-i-1):

			# traverse the array from 0 to n-i-1. Swap if the element found is greater than the next element
			if arr[j] > arr[j+1] :
				arr[j], arr[j+1] = arr[j+1], arr[j]
				swapped = True

		# IF no two elements were swapped by inner loop, then break
		if swapped == False:
			break

arr = [64, 34, 25, 12, 22, 11, 90]
bubbleSort(arr)
print (arr)
#########################################################

INSERTION SORT
https://www.geeksforgeeks.org/insertion-sort/?ref=gcse

To sort an array of size n in ascending order: 
1: Iterate from arr[1] to arr[n] over the array. 
2: Compare the current element (key) to its predecessor. 
3: If the key element is smaller than its predecessor, compare it to the elements before. Move the greater elements one position up to make space for the swapped element.
Time Complexity : O(n*n)

CODE:
def insertionSort(arr):

	# Traverse through 1 to len(arr)
	for i in range(1, len(arr)):

		key = arr[i]

		# Move elements of arr[0..i-1], that are greater than key, to one position ahead of their current position
		j = i-1
		while j >= 0 and key < arr[j] :
				arr[j + 1] = arr[j]
				j -= 1
		arr[j + 1] = key

arr = [12, 11, 13, 5, 6]
insertionSort(arr)
print(arr)
#########################################################

SELECTION SORT
https://www.geeksforgeeks.org/selection-sort/


#########################################################
